---
import BaseLayout from './BaseLayout.astro';
import { Image } from 'astro:assets';
import FormattedDate from '../components/FormattedDate.astro';
import ArticleFooter from '../components/ArticleFooter.astro';
import Prose from '../components/Prose.astro';
import PostSidebar from '../components/PostSidebar.astro';
import CategoryBadge from '../components/CategoryBadge.astro';
import type { ImageMetadata } from 'astro';

interface Props {
	title: string;
	description: string;
	pubDate: Date;
	heroImage?: ImageMetadata;
	image?: ImageMetadata;
	canonical?: string;
	noindex?: boolean;
	readingTime?: number;
	category?: string;
	tags?: string[];
}

const { 
	title, 
	description, 
	pubDate, 
	heroImage, 
	image = heroImage,
	canonical,
	noindex = false,
	readingTime,
	category,
	tags = []
} = Astro.props;
---

<BaseLayout 
	title={title} 
	description={description} 
	image={image}
	canonical={canonical}
	noindex={noindex}
>
	<!-- Main Layout Container -->
	<div class="post-layout">
		<!-- Sidebar -->
		<PostSidebar 
			title={title}
			description={description}
			pubDate={pubDate}
			heroImage={heroImage}
			readingTime={readingTime}
			category={category}
			tags={tags}
		/>
		
		<!-- Main Content -->
		<main class="main-content">
			<article class="content-article">
				{heroImage && (
					<div class="hero-image">
						<Image 
							width={720} 
							height={360} 
							src={heroImage} 
							alt={title}
							class="hero-img"
						/>
					</div>
				)}
				
				<!-- Mobile/Tablet: Title and metadata in main content -->
				<div class="mobile-header">
					<h1 class="mobile-title">{title}</h1>
					{description && (
						<p class="mobile-description">{description}</p>
					)}
					<div class="mobile-metadata">
						<time datetime={pubDate.toISOString()} class="mobile-date">
							<FormattedDate date={pubDate} />
						</time>
						{readingTime && (
							<span class="mobile-reading-time">{readingTime} min read</span>
						)}
						{category && (
							<CategoryBadge category={category} size="small" className="mobile-category" />
						)}
					</div>
					{tags.length > 0 && (
						<div class="mobile-tags">
							{tags.map((tag) => (
								<a href={`/notes?tag=${encodeURIComponent(tag)}`} class="mobile-tag">
									#{tag}
								</a>
							))}
						</div>
					)}
				</div>
				
				<Prose size="lg">
					<slot />
				</Prose>
			</article>
		</main>
	</div>
	
	<!-- Footer -->
	<ArticleFooter />
</BaseLayout>

<style>
	/* Main Layout Container */
	.post-layout {
		display: flex;
		min-height: calc(100vh - 80px); /* Approximate header + footer height */
		background: var(--color-background);
	}

	/* Main Content */
	.main-content {
		flex: 1;
		padding: var(--space-6);
		overflow-x: hidden;
	}

	.content-article {
		width: 100%;
		max-width: var(--container-prose);
		margin: 0 auto;
	}

	.hero-image {
		margin-bottom: var(--space-8);
		overflow: hidden;
		box-shadow: var(--shadow-elevated);
		border-radius: var(--radius-lg);
	}

	.hero-img {
		width: 100%;
		height: auto;
		display: block;
		margin: 0;
	}

	/* Mobile/Tablet Header */
	.mobile-header {
		margin-bottom: var(--space-8);
		padding-bottom: var(--space-6);
		border-bottom: 1px solid var(--color-border-light);
	}

	.mobile-title {
		font-family: var(--font-serif);
		font-size: var(--text-3xl);
		font-weight: 700;
		line-height: var(--leading-tight);
		color: var(--color-primary);
		margin: 0 0 var(--space-4) 0;
		letter-spacing: -0.02em;
	}

	.mobile-description {
		font-size: var(--text-lg);
		line-height: var(--leading-relaxed);
		color: var(--color-secondary);
		margin: 0 0 var(--space-6) 0;
		font-style: italic;
	}

	.mobile-metadata {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-4);
		margin-bottom: var(--space-4);
		font-size: var(--text-sm);
		color: var(--color-muted);
	}

	.mobile-date,
	.mobile-reading-time {
		display: flex;
		align-items: center;
		gap: var(--space-1);
	}

	.mobile-category {
		/* CategoryBadge component handles its own styling */
	}

	.mobile-tags {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-2);
	}

	.mobile-tag {
		display: inline-block;
		font-size: var(--text-xs);
		font-weight: 500;
		color: var(--color-accent);
		text-decoration: none;
		padding: var(--space-1) var(--space-2);
		background: var(--color-background-subtle);
		border-radius: var(--radius-full);
		transition: all var(--transition-smooth);
		border: 1px solid var(--color-border-light);
		box-shadow: var(--shadow-card);
	}

	.mobile-tag:hover {
		background: var(--color-accent);
		color: var(--color-background);
		text-decoration: none;
	}

	/* Mobile-first: Stack layout */
	@media (max-width: 1023px) {
		.post-layout {
			flex-direction: column;
		}

		.main-content {
			padding: var(--space-4);
		}

		.hero-image {
			margin-bottom: var(--space-6);
		}

		.mobile-header {
			display: block;
		}
	}

	/* Desktop: Hide mobile header, show sidebar */
	@media (min-width: 1024px) {
		.mobile-header {
			display: none;
		}
	}

	/* Desktop: Side-by-side layout */
	@media (min-width: 1024px) {
		.post-layout {
			flex-direction: row;
		}

		.main-content {
			padding: var(--space-8);
		}

		.hero-image {
			margin-bottom: var(--space-12);
		}
	}

	/* Dark mode support */
	[data-theme="dark"] .post-layout {
		background: var(--color-background);
	}

	[data-theme="dark"] .hero-img {
		/* Hero image styling is handled by the image itself */
	}

	[data-theme="dark"] .mobile-header {
		border-bottom-color: var(--color-border);
	}

	[data-theme="dark"] .mobile-title {
		color: var(--color-primary);
	}

	[data-theme="dark"] .mobile-description {
		color: var(--color-secondary);
	}

	[data-theme="dark"] .mobile-metadata {
		color: var(--color-muted);
	}

	[data-theme="dark"] .mobile-category {
		/* CategoryBadge component handles its own dark mode styling */
	}

	[data-theme="dark"] .mobile-tag {
		background: var(--color-background-subtle);
		border-color: var(--color-border);
		color: var(--color-accent);
	}

	[data-theme="dark"] .mobile-tag:hover {
		background: var(--color-accent);
		color: var(--color-background);
	}
</style>
